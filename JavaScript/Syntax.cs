namespace Esprima.NET
{
    public class Syntax
    {
        public const string AssignmentExpression = "AssignmentExpression";
        public const string AssignmentPattern = "AssignmentPattern";
        public const string ArrayExpression = "ArrayExpression";
        public const string ArrayPattern = "ArrayPattern";
        public const string ArrowFunctionExpression = "ArrowFunctionExpression";
        public const string BlockStatement = "BlockStatement";
        public const string BinaryExpression = "BinaryExpression";
        public const string BreakStatement = "BreakStatement";
        public const string CallExpression = "CallExpression";
        public const string CatchClause = "CatchClause";
        public const string ClassBody = "ClassBody";
        public const string ClassDeclaration = "ClassDeclaration";
        public const string ClassExpression = "ClassExpression";
        public const string ConditionalExpression = "ConditionalExpression";
        public const string ContinueStatement = "ContinueStatement";
        public const string DoWhileStatement = "DoWhileStatement";
        public const string DebuggerStatement = "DebuggerStatement";
        public const string EmptyStatement = "EmptyStatement";
        public const string ExportAllDeclaration = "ExportAllDeclaration";
        public const string ExportDefaultDeclaration = "ExportDefaultDeclaration";
        public const string ExportNamedDeclaration = "ExportNamedDeclaration";
        public const string ExportSpecifier = "ExportSpecifier";
        public const string ExpressionStatement = "ExpressionStatement";
        public const string ForStatement = "ForStatement";
        public const string ForOfStatement = "ForOfStatement";
        public const string ForInStatement = "ForInStatement";
        public const string FunctionDeclaration = "FunctionDeclaration";
        public const string FunctionExpression = "FunctionExpression";
        public const string Identifier = "Identifier";
        public const string IfStatement = "IfStatement";
        public const string ImportDeclaration = "ImportDeclaration";
        public const string ImportDefaultSpecifier = "ImportDefaultSpecifier";
        public const string ImportNamespaceSpecifier = "ImportNamespaceSpecifier";
        public const string ImportSpecifier = "ImportSpecifier";
        public const string Literal = "Literal";
        public const string LabeledStatement = "LabeledStatement";
        public const string LogicalExpression = "LogicalExpression";
        public const string MemberExpression = "MemberExpression";
        public const string MetaProperty = "MetaProperty";
        public const string MethodDefinition = "MethodDefinition";
        public const string NewExpression = "NewExpression";
        public const string ObjectExpression = "ObjectExpression";
        public const string ObjectPattern = "ObjectPattern";
        public const string Program = "Program";
        public const string Property = "Property";
        public const string RestElement = "RestElement";
        public const string ReturnStatement = "ReturnStatement";
        public const string SequenceExpression = "SequenceExpression";
        public const string SpreadElement = "SpreadElement";
        public const string Super = "Super";
        public const string SwitchCase = "SwitchCase";
        public const string SwitchStatement = "SwitchStatement";
        public const string TaggedTemplateExpression = "TaggedTemplateExpression";
        public const string TemplateElement = "TemplateElement";
        public const string TemplateLiteral = "TemplateLiteral";
        public const string ThisExpression = "ThisExpression";
        public const string ThrowStatement = "ThrowStatement";
        public const string TryStatement = "TryStatement";
        public const string UnaryExpression = "UnaryExpression";
        public const string UpdateExpression = "UpdateExpression";
        public const string VariableDeclaration = "VariableDeclaration";
        public const string VariableDeclarator = "VariableDeclarator";
        public const string WhileStatement = "WhileStatement";
        public const string WithStatement = "WithStatement";
        public const string YieldExpression = "YieldExpression";
    };
}